## Shapes

The AJAX Map Control supports some drawing primitives like pushpins, lines and
polygons. The following example demonstrates how to add shapes to the map.

    #fsharp
    [<JavaScript>]
    let Shapes() =     
        Test (fun map ->
            let location = new Maps.VELatLong(0.,0.)
            location.Latitude <- 47.6
            location.Longitude <- -122.33 
            map.LoadMap(location, 9, Maps.VEMapStyle.Hybrid, false)            
            
            // Pushpin
            let pushpin = new Maps.VEShape(Maps.VEShapeType.Pushpin, [|location|])
            map.AddShape pushpin
            
            let fromPoints (x,y) = new Maps.VELatLong(x + location.Latitude, y + location.Longitude)

            // Line
            let linePoints = 
                [|(0.2,0.2); (0.2,-0.2); (-0.2,-0.2); (-0.2,0.2); (0.2,0.2)|]
                |> Array.map fromPoints

            let line = new Maps.VEShape(Maps.VEShapeType.Polyline, linePoints)
            line.HideIcon()
            map.AddShape line
            
            // Polygon
            let polyPoints = 
                [|(0.1,0.1); (0.1,-0.1); (-0.1,-0.1); (-0.1,0.1)|]
                |> Array.map fromPoints
            let polygon = new Maps.VEShape(Maps.VEShapeType.Polygon, polyPoints)
            polygon.HideIcon()
            map.AddShape polygon
            )

First, we use the `Test` function from the previous example. We create a VELatLong
for selecting the center coordinate.

Having the map loaded in line 9, we start adding the different possible shapes to the map. Adding a shape to the map is done in 3 steps:

 * Generating the `VELatLong` objects on which the shape will be placed.
 * Instantiating the shape.
 * Adding the shape to the map.

In the case of the pushpin (Lines 9-11), we use the `VEShape` class and the
`VEShapeType.Pushpin` to create it. The array of coordinates that is passed to the
constructor consists of a single element because, in the case of the pushpin, the
localization only requires one point.

The next 2 cases (polyline and polygon) work similarly. The order in which the shape
is drawn is based on the order that is used in the array. The type of the shape is
determined by the `VEShapeType`. Every shape adds an icon that, by default, consists of
a pushpin. In order to hide this icon we call the `HideIcon()` method.

The end result is the following:

![Shapes](Shapes.png)\

