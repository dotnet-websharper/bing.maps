## A Simple Map

Creating a map typically involves 3 steps:

  * Creating a container, an `Html` element that will hold the map
    object.

  * Initializing the map and attaching it to the container.

  * Setting properties, wiring events and adding shapes or controls to the
    attached map.

The first two steps are independent of the functionality.  For this
you can create a simple helper function that receives the function that 
will render the map after it has been attached to the `DOM`.

Code example:

    #fsharp
    [<JavaScript>]
    let Test f =
        let id = "mapId"
        Div [Attr.Id id ; Attr.Style "position:relative; margin-top:25px; width:400px; height:400px;"]
        |>! OnAfterRender (fun mapElement -> 
            let map = new Maps.VEMap(id)
            f map)

A `<div>` element is created at line 4.  The size of the `<div>` will determine the
size of the map.  You can set all the style properties you want in this step,
including padding or margins.

It is necessary to initialize the map using the `OnAfterRender` method (line 5).  The
Bing Maps API requires that the element is already attached to the DOM before
initializing the map.  Doing the Map initialization after the widget rendering makes
sure that this condition holds.

The following function will build the most simple map.

    #fsharp
    [<JavaScript>]
    let BasicMap () =     
        Test (fun map -> 
            map.LoadMap())

First, you use the `Test` function defined previously.  That will take care of
correctly initializing the `Html` container and the map. Then you create a function
that will be executed inside of the `Test` function.  This function just calls the
`LoadMap` method in order to provide the map with the default settings.

This function later needs to be added to the aspx page. In order to do this, you
create a `Web.Control` with a body that contains the BasicMap.

    #fsharp 
    [<JavaScriptType>] 
    type Test() = 
        inherit Web.Control()
        [<JavaScript>]
        override this.Body = 
            let title = H1 [Text "Examples:"]
            let maps = [Tests.BasicMap ()]
            Div (Seq.append [title] maps)

![SimpleMap1](SimpleMap1.png)\

The method `LoadMap` is overloaded to support different configurations. You can change the
default location of the map by specifying a different latitude and longitude. This is
done through the `VELatLong` class.

    #fsharp 
    [<JavaScript>]
    let LatLongProperties(n: int) =     
        Test (fun map ->
            let location = new Maps.VELatLong(0.,0.)
            location.Latitude <- 47.6
            location.Longitude <- -122.33 
            map.LoadMap(location, 10, Maps.VEMapStyle.Hybrid))

This example shows how you can initialize the VELatLong components directly from the
constructor or using mutation. This time we also used a 10x zoom and a `Hybrid` style
for the map.

![SimpleMap2](SimpleMap2.png)\

